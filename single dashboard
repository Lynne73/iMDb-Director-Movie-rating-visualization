<!DOCTYPE html>
<html lang="zxx">

<head>
  <meta charset="utf-8">
  <title>IMDb rating | popularity Analysis</title>

  <!-- mobile responsive meta -->
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <!-- ** Plugins Needed for the Project ** -->
  <!-- Bootstrap -->
  <link rel="stylesheet" href="plugins/bootstrap/bootstrap.min.css">
  <!-- slick slider -->
  <link rel="stylesheet" href="plugins/slick/slick.css">
  <!-- themefy-icon -->
  <link rel="stylesheet" href="plugins/themify-icons/themify-icons.css">

  <!-- Main Stylesheet -->
  <link href="css/style.css" rel="stylesheet">

  <!--Favicon-->
  <link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon">
  <link rel="icon" href="images/favicon.ico" type="image/x-icon">

    
<script src="http://d3js.org/d3.v2.js"></script>
	<!-- Note: I made good use of the sample code provided by the D3JS community and extended it to fit my needs to create this simple dashboard -->
    <style type="text/css">


#pieChart {    
	position:absolute;
	top:10px;
	left:10px;
	width:400px;
	height: 400px; 
}



#lineChart {    
	position:absolute;
	top:10px;
	left:410px;
	height: 150px;
}

#barChart {
	position:absolute;
	top:160px;
	left:410px;
	height: 250px;
}

.slice {
   font-size: 12pt;
   font-family: Verdana;
   fill: white; //svg specific - instead of color
   font-weight: bold;	
  		} 

/*for line chart*/
.axis path, .axis line {
    fill: none;
    stroke: black;
    shape-rendering: crispEdges; //The shape-rendering property is an SVG attribute, used here to make sure our axis and its tick mark lines are pixel-perfect. 
}

.line {
  fill: none;
  /*stroke: steelblue;*/
  stroke-width: 3px;
}

.dot {
  /*fill: white;*/
  /*stroke: steelblue;*/
  stroke-width: 1.5px;
  }
				

.axis text {
    font-family: Verdana;
    font-size: 11px;
}

.title {
	 font-family: Verdana;
    font-size: 15px;	
		
}

.xAxis {
    font-family: verdana;
    font-size: 11px;
    fill: black;
}  

.yAxis {
    font-family: verdana;
    font-size: 11px;
    fill: white;
}

  
table {
	border-collapse:collapse;
	border: 0px;	
	font-family: Verdana;	
	color: #5C5558;
	font-size: 12px;
	text-align: right;			
}

td {
	padding-left: 10px;		
}

#lineChartTitle1 {
	font-family: Verdana;
	font-size  : 14px;
	fill       : lightgrey;
	font-weight: bold;
	text-anchor: middle;
}

#lineChartTitle2 {
	font-family: Verdana;
	font-size  : 72px;
	fill       : grey;
	text-anchor: middle;
	font-weight: bold;
	/*font-style: italic;*/
}
				 
    </style>
   
</head>

<body>
  <!-- preloader -->
  <div class="preloader">
    <div class="loader">
      <span class="dot"></span>
      <div class="dots">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>
  </div>
  <!-- /preloader -->


<!-- page-title -->
<section class="section bg-secondary">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <h4>Looking for a movie in a specific language, you'd better search in This country!</h4>
      </div>
    </div>
  </div>
</section>
<!-- /page-title -->

<!-- blog single -->
<section>
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
<!--
        <ul class="list-inline d-flex justify-content-between py-3">
          <li class="list-inline-item"><i class="ti-user mr-2"></i>Designed by Zihan LI</li>
          <li class="list-inline-item"><i class="ti-calendar mr-2"></i>June 8, 2019</li>
        </ul>
-->
           
          
    
          
    <div id="pieChart"></div>
    <div id="barChart"></div>  
    <div id="lineChart"></div>
<!--
          <div class="content">

      <blockquote>Hover on a specific movie genre, you can see the it got highlighted, and its genre name will be shown above the plot.
      </blockquote>

      <p>As you can see, there is a sharp decrease around late 80s and early 90s. It was because of the Big Economy Recession happened in western world. In US, Canada, Australia, UK, Finland as well as many other developed countries that produces large number of movies, their economy was in the doldrums until early 90s, where the lines rise up quickly.</p>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et
        dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex
        ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat
        nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
        anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque
        laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae
        dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia
        consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem
        ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut
        labore et dolore magnam aliquam quaerat voluptatem.</p>



    </div>
-->
    <script type="text/javascript">
        /*
################ FORMATS ##################
-------------------------------------------
*/


var 	formatAsPercentage = d3.format("%"),
		formatAsPercentage1Dec = d3.format(".1%"),
		formatAsInteger = d3.format(","),
		fsec = d3.time.format("%S s"),
		fmin = d3.time.format("%M m"),
		fhou = d3.time.format("%H h"),
		fwee = d3.time.format("%a"),
		fdat = d3.time.format("%d d"),
		fmon = d3.time.format("%b")
		;

/*
############# PIE CHART ###################
-------------------------------------------
*/



function dsPieChart(){

	var dataset = [{category: "English", measure: 0.3861969460141878},
          {category: "Bulgarian", measure: 0.06928780409602822},
          {category: "Turkish", measure: 0.07210131858442548},
          {category: "Chinese", measure: 0.014267965211815158},
          {category: "French", measure: 0.20103402669231693},
          {category: "Spanish", measure: 0.14179792393090457},
          {category: "Swedish", measure: 0.11531401547032183},
          ]
	      ;

	var 	width = 400,
		   height = 400,
		   outerRadius = Math.min(width, height) / 2,
		   innerRadius = outerRadius * .999,   
		   // for animation
		   innerRadiusFinal = outerRadius * .5,
		   innerRadiusFinal3 = outerRadius* .45,
		   color = d3.scale.category20()    //builtin range of colors
		   ;
	    
	var vis = d3.select("#pieChart")
	     .append("svg:svg")              //create the SVG element inside the <body>
	     .data([dataset])                   //associate our data with the document
	         .attr("width", width)           //set the width and height of our visualization (these will be attributes of the <svg> tag
	         .attr("height", height)
	     		.append("svg:g")                //make a group to hold our pie chart
	         .attr("transform", "translate(" + outerRadius + "," + outerRadius + ")")    //move the center of the pie chart from 0, 0 to radius, radius
				;
				
   var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
        	.outerRadius(outerRadius).innerRadius(innerRadius);
   
   // for animation
   var arcFinal = d3.svg.arc().innerRadius(innerRadiusFinal).outerRadius(outerRadius);
	var arcFinal3 = d3.svg.arc().innerRadius(innerRadiusFinal3).outerRadius(outerRadius);

   var pie = d3.layout.pie()           //this will create arc data for us given a list of values
        .value(function(d) { return d.measure; });    //we must tell it out to access the value of each element in our data array

   var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
        .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) 
        .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
            .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
               .attr("class", "slice")    //allow us to style things in the slices (like text)
               .on("mouseover", mouseover)
    				.on("mouseout", mouseout)
    				.on("click", up)
    				;
    				
        arcs.append("svg:path")
               .attr("fill", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above
               .attr("d", arc)     //this creates the actual SVG path using the associated data (pie) with the arc drawing function
					.append("svg:title") //mouseover title showing the figures
				   .text(function(d) { return d.data.category + ": " + formatAsPercentage(d.data.measure); });			

        d3.selectAll("g.slice").selectAll("path").transition()
			    .duration(750)
			    .delay(10)
			    .attr("d", arcFinal )
			    ;
	
	  // Add a label to the larger arcs, translated to the arc centroid and rotated.
	  // source: http://bl.ocks.org/1305337#index.html
	  arcs.filter(function(d) { return d.endAngle - d.startAngle > .2; })
	  		.append("svg:text")
	      .attr("dy", ".35em")
	      .attr("text-anchor", "middle")
	      .attr("transform", function(d) { return "translate(" + arcFinal.centroid(d) + ")rotate(" + angle(d) + ")"; })
	      //.text(function(d) { return formatAsPercentage(d.value); })
	      .text(function(d) { return d.data.category; })
	      ;
	   
	   // Computes the label angle of an arc, converting from radians to degrees.
		function angle(d) {
		    var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;
		    return a > 90 ? a - 180 : a;
		}
		    
		
		// Pie chart title			
		vis.append("svg:text")
	     	.attr("dy", ".35em")
	      .attr("text-anchor", "middle")
	      .text("Language of movie")
	      .attr("class","title")
    vis.append("svg:text")
	     	.attr("dy", "2em")
	      .attr("text-anchor", "middle")
	      .text("in recent 50 years")
	      .attr("class","title")
	      ;		    


		
	function mouseover() {
	  d3.select(this).select("path").transition()
	      .duration(750)
	        		//.attr("stroke","red")
	        		//.attr("stroke-width", 1.5)
	        		.attr("d", arcFinal3)
	        		;
	}
	
	function mouseout() {
	  d3.select(this).select("path").transition()
	      .duration(750)
	        		//.attr("stroke","blue")
	        		//.attr("stroke-width", 1.5)
	        		.attr("d", arcFinal)
	        		;
	}
	
	function up(d, i) {
	
				/* update bar chart when user selects piece of the pie chart */
				//updateBarChart(dataset[i].category);
				updateBarChart(d.data.category, color(i));
				updateLineChart(d.data.category, color(i));
			 
	}
}

dsPieChart();

/*
############# BAR CHART ###################
-------------------------------------------
*/



var datasetBarChart = [
    {'group': 'Bulgarian', 'category': 'Bulgaria', 'measure': 8643},
    {'group': 'Bulgarian', 'category': 'Belgium', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'Canada', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'France', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'China', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'Hong Kong', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'Spain', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'Sweden', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'Switzerland', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'US', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'Tunisia', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'UK', 'measure': 0},
    {'group': 'Bulgarian', 'category': 'Finland', 'measure': 0},

    {'group': 'English', 'category': 'Bulgaria', 'measure': 0},
    {'group': 'English', 'category': 'Belgium', 'measure': 120},
    {'group': 'English', 'category': 'Canada', 'measure': 2092},
    {'group': 'English', 'category': 'France', 'measure': 2},
    {'group': 'English', 'category': 'China', 'measure': 0},
    {'group': 'English', 'category': 'Hong Kong', 'measure': 2325},
    {'group': 'English', 'category': 'Spain', 'measure': 59},
    {'group': 'English', 'category': 'Sweden', 'measure': 5},
    {'group': 'English', 'category': 'Switzerland', 'measure': 22},
    {'group': 'English', 'category': 'US', 'measure': 30274},
    {'group': 'English', 'category': 'Tunisia', 'measure': 0},
    {'group': 'English', 'category': 'Turkey', 'measure': 0},
    {'group': 'English', 'category': 'UK', 'measure': 5730},
    {'group': 'English', 'category': 'Finland', 'measure': 0},

    {'group': 'French', 'category': 'Bulgaria', 'measure': 0},
    {'group': 'French', 'category': 'Belgium', 'measure': 1091},
    {'group': 'French', 'category': 'Canada', 'measure': 6161},
    {'group': 'French', 'category': 'France', 'measure': 17638},
    {'group': 'French', 'category': 'China', 'measure': 0},
    {'group': 'French', 'category': 'Hong Kong', 'measure': 0},
    {'group': 'French', 'category': 'Spain', 'measure': 0},
    {'group': 'French', 'category': 'Sweden', 'measure': 0},
    {'group': 'French', 'category': 'Switzerland', 'measure': 472},
    {'group': 'French', 'category': 'US', 'measure': 0},
    {'group': 'French', 'category': 'Tunisia', 'measure': 33},
    {'group': 'French', 'category': 'Turkey', 'measure': 0},
    {'group': 'French', 'category': 'UK', 'measure': 0},
    {'group': 'French', 'category': 'Finland', 'measure': 0},


    
    {'group': 'Spanish', 'category': 'Bulgaria', 'measure': 0},
    {'group': 'Spanish', 'category': 'Belgium', 'measure': 0},
    {'group': 'Spanish', 'category': 'Canada', 'measure': 0},
    {'group': 'Spanish', 'category': 'France', 'measure': 0},
    {'group': 'Spanish', 'category': 'China', 'measure': 0},
    {'group': 'Spanish', 'category': 'Hong Kong', 'measure': 0},
    {'group': 'Spanish', 'category': 'Spain', 'measure': 17690},
    {'group': 'Spanish', 'category': 'Sweden', 'measure': 0},
    {'group': 'Spanish', 'category': 'Switzerland', 'measure': 0},
    {'group': 'Spanish', 'category': 'US', 'measure': 0},
    {'group': 'Spanish', 'category': 'Tunisia', 'measure': 0},
    {'group': 'Spanish', 'category': 'Turkey', 'measure': 0},
    {'group': 'Spanish', 'category': 'UK', 'measure': 0},
    {'group': 'Spanish', 'category': 'Finland', 'measure': 0},
    
    {'group': 'Swedish', 'category': 'Bulgaria', 'measure': 0},
    {'group': 'Swedish', 'category': 'Belgium', 'measure': 0},
    {'group': 'Swedish', 'category': 'Canada', 'measure': 0},
    {'group': 'Swedish', 'category': 'France', 'measure': 0},
    {'group': 'Swedish', 'category': 'China', 'measure': 0},
    {'group': 'Swedish', 'category': 'Hong Kong', 'measure': 0},
    {'group': 'Swedish', 'category': 'Spain', 'measure': 0},
    {'group': 'Swedish', 'category': 'Sweden', 'measure': 7768},
    {'group': 'Swedish', 'category': 'Switzerland', 'measure': 0},
    {'group': 'Swedish', 'category': 'US', 'measure': 0},
    {'group': 'Swedish', 'category': 'Tunisia', 'measure': 0},
    {'group': 'Swedish', 'category': 'Turkey', 'measure': 0},
    {'group': 'Swedish', 'category': 'UK', 'measure': 0},
    {'group': 'Swedish', 'category': 'Finland', 'measure': 11815},

    {'group': 'Turkish', 'category': 'Bulgaria', 'measure': 0},
    {'group': 'Turkish', 'category': 'Belgium', 'measure': 0},
    {'group': 'Turkish', 'category': 'Canada', 'measure': 0},
    {'group': 'Turkish', 'category': 'France', 'measure': 0},
    {'group': 'Turkish', 'category': 'China', 'measure': 0},
    {'group': 'Turkish', 'category': 'Hong Kong', 'measure': 0},
    {'group': 'Turkish', 'category': 'Spain', 'measure': 0},
    {'group': 'Turkish', 'category': 'Sweden', 'measure': 0},
    {'group': 'Turkish', 'category': 'Switzerland', 'measure': 0},
    {'group': 'Turkish', 'category': 'US', 'measure': 0},
    {'group': 'Turkish', 'category': 'Tunisia', 'measure': 0},
    {'group': 'Turkish', 'category': 'Turkey', 'measure': 9085},
    {'group': 'Turkish', 'category': 'UK', 'measure': 0},
    {'group': 'Turkish', 'category': 'Finland', 'measure': 0},
    
    
    {'group': 'Chinese', 'category': 'Bulgaria', 'measure': 0},
    {'group': 'Chinese', 'category': 'Belgium', 'measure': 0},
    {'group': 'Chinese', 'category': 'Canada', 'measure': 0},
    {'group': 'Chinese', 'category': 'France', 'measure': 0},
    {'group': 'Chinese', 'category': 'China', 'measure': 867},
    {'group': 'Chinese', 'category': 'Hong Kong', 'measure': 913},
    {'group': 'Chinese', 'category': 'Spain', 'measure': 0},
    {'group': 'Chinese', 'category': 'Sweden', 'measure': 0},
    {'group': 'Chinese', 'category': 'Switzerland', 'measure': 0},
    {'group': 'Chinese', 'category': 'US', 'measure': 0},
    {'group': 'Chinese', 'category': 'Tunisia', 'measure': 0},
    {'group': 'Chinese', 'category': 'Turkey', 'measure': 0},
    {'group': 'Chinese', 'category': 'UK', 'measure': 0},
    {'group': 'Chinese', 'category': 'Finland', 'measure': 0},


    
    
    {'group': 'All', 'category': 'Bulgaria', 'measure': 8643},
    {'group': 'All', 'category': 'Belgium', 'measure': 1211},
    {'group': 'All', 'category': 'Canada', 'measure': 3581},
    {'group': 'All', 'category': 'France', 'measure': 17640},
    {'group': 'All', 'category': 'China', 'measure': 867},
    {'group': 'All', 'category': 'Hong Kong', 'measure': 2325},
    {'group': 'All', 'category': 'Spain', 'measure': 17749},
    {'group': 'All', 'category': 'Sweden', 'measure': 7673},
    {'group': 'All', 'category': 'Switzerland', 'measure': 494},
    {'group': 'All', 'category': 'US', 'measure': 30274},
    {'group': 'All', 'category': 'Tunisia', 'measure': 33},
    {'group': 'All', 'category': 'Turkey', 'measure': 9085},
    {'group': 'All', 'category': 'UK', 'measure': 5730},
    {'group': 'All', 'category': 'Finland', 'measure': 11815}
]
    
    
 
;

// set initial group value
var group = "All";

function datasetBarChosen(group) {
	var ds = [];
	for (x in datasetBarChart) {
		 if(datasetBarChart[x].group==group){
		 	ds.push(datasetBarChart[x]);
		 } 
		}
	return ds;
}


function dsBarChartBasics() {

		var margin = {top: 30, right: 5, bottom: 20, left: 50},
		width = 800 - margin.left - margin.right,
	   height = 300 - margin.top - margin.bottom,
		colorBar = d3.scale.category20(),
		barPadding = 1
		;
		
		return {
			margin : margin, 
			width : width, 
			height : height, 
			colorBar : colorBar, 
			barPadding : barPadding
		}			
		;
}

function dsBarChart() {

	var firstDatasetBarChart = datasetBarChosen(group);         	
	
	var basics = dsBarChartBasics();
	
	var margin = basics.margin,
		width = basics.width,
	   height = basics.height,
		colorBar = basics.colorBar,
		barPadding = basics.barPadding
		;
					
	var 	xScale = d3.scale.linear()
						.domain([0, firstDatasetBarChart.length])
						.range([0, width])
						;
						
	// Create linear y scale 
	// Purpose: No matter what the data is, the bar should fit into the svg area; bars should not
	// get higher than the svg height. Hence incoming data needs to be scaled to fit into the svg area.  
	var yScale = d3.scale.linear()
			// use the max funtion to derive end point of the domain (max value of the dataset)
			// do not use the min value of the dataset as min of the domain as otherwise you will not see the first bar
		   .domain([0, d3.max(firstDatasetBarChart, function(d) { return d.measure; })])
		   // As coordinates are always defined from the top left corner, the y position of the bar
		   // is the svg height minus the data value. So you basically draw the bar starting from the top. 
		   // To have the y position calculated by the range function
		   .range([height, 0])
		   ;
	
	//Create SVG element
	
	var svg = d3.select("#barChart")
			.append("svg")
		    .attr("width", width + margin.left + margin.right)
		    .attr("height", height + margin.top + margin.bottom)
		    .attr("id","barChartPlot")
		    ;
	
	var plot = svg
		    .append("g")
		    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
		    ;
	            
	plot.selectAll("rect")
		   .data(firstDatasetBarChart)
		   .enter()
		   .append("rect")
			.attr("x", function(d, i) {
			    return xScale(i);
			})
		   .attr("width", width / firstDatasetBarChart.length - barPadding)   
			.attr("y", function(d) {
			    return yScale(d.measure);
			})  
			.attr("height", function(d) {
			    return height-yScale(d.measure);
			})
			.attr("fill", "lightgrey")
			;
	
		
	// Add y labels to plot	
	
	plot.selectAll("text")
	.data(firstDatasetBarChart)
	.enter()
	.append("text")
	.text(function(d) {
			return formatAsInteger(d3.round(d.measure));
	})
	.attr("text-anchor", "middle")
	// Set x position to the left edge of each bar plus half the bar width
	.attr("x", function(d, i) {
			return (i * (width / firstDatasetBarChart.length)) + ((width / firstDatasetBarChart.length - barPadding) / 2);
	})
	.attr("y", function(d) {
			return yScale(d.measure) + 14;
	})
	.attr("class", "yAxis")
	/* moved to CSS			   
	.attr("font-family", "sans-serif")
	.attr("font-size", "11px")
	.attr("fill", "white")
	*/
	;
	
	// Add x labels to chart	
	
	var xLabels = svg
		    .append("g")
		    .attr("transform", "translate(" + margin.left + "," + (margin.top + height)  + ")")
		    ;
	
	xLabels.selectAll("text.xAxis")
		  .data(firstDatasetBarChart)
		  .enter()
		  .append("text")
		  .text(function(d) { return d.category;})
		  .attr("text-anchor", "middle")
			// Set x position to the left edge of each bar plus half the bar width
						   .attr("x", function(d, i) {
						   		return (i * (width / firstDatasetBarChart.length)) + ((width / firstDatasetBarChart.length - barPadding) / 2);
						   })
		  .attr("y", 15)
		  .attr("class", "xAxis")
		  //.attr("style", "font-size: 12; font-family: Helvetica, sans-serif")
		  ;			
	 
	// Title
	
	svg.append("text")
		.attr("x", (width + margin.left + margin.right)/2)
		.attr("y", 15)
		.attr("class","title")				
		.attr("text-anchor", "middle")
		.text("Overall total movie number over the recent 50 years")
		;
}

dsBarChart();

 /* ** UPDATE CHART ** */
 
/* updates bar chart on request */

function updateBarChart(group, colorChosen) {
	
		var currentDatasetBarChart = datasetBarChosen(group);
		
		var basics = dsBarChartBasics();
	
		var margin = basics.margin,
			width = basics.width,
		   height = basics.height,
			colorBar = basics.colorBar,
			barPadding = basics.barPadding
			;
		
		var 	xScale = d3.scale.linear()
			.domain([0, currentDatasetBarChart.length])
			.range([0, width])
			;
		
			
		var yScale = d3.scale.linear()
	      .domain([0, d3.max(currentDatasetBarChart, function(d) { return d.measure; })])
	      .range([height,0])
	      ;
	      
	   var svg = d3.select("#barChart svg");
	      
	   var plot = d3.select("#barChartPlot")
	   	.datum(currentDatasetBarChart)
		   ;
	
	  		/* Note that here we only have to select the elements - no more appending! */
	  	plot.selectAll("rect")
	      .data(currentDatasetBarChart)
	      .transition()
			.duration(750)
			.attr("x", function(d, i) {
			    return xScale(i);
			})
		   .attr("width", width / currentDatasetBarChart.length - barPadding)   
			.attr("y", function(d) {
			    return yScale(d.measure);
			})  
			.attr("height", function(d) {
			    return height-yScale(d.measure);
			})
			.attr("fill", colorChosen)
			;
		
		plot.selectAll("text.yAxis") // target the text element(s) which has a yAxis class defined
			.data(currentDatasetBarChart)
			.transition()
			.duration(750)
		   .attr("text-anchor", "middle")
		   .attr("x", function(d, i) {
		   		return (i * (width / currentDatasetBarChart.length)) + ((width / currentDatasetBarChart.length - barPadding) / 2);
		   })
		   .attr("y", function(d) {
		   		return yScale(d.measure) + 14;
		   })
		   .text(function(d) {
				return formatAsInteger(d3.round(d.measure));
		   })
		   .attr("class", "yAxis")					 
		;
		

		svg.selectAll("text.title") // target the text element(s) which has a title class defined
			.attr("x", (width + margin.left + margin.right)/2)
			.attr("y", 15)
			.attr("class","title")				
			.attr("text-anchor", "middle")
			.text(group + "'s total movie number over the recent 50 years")
		;
}


/*
############# LINE CHART ##################
-------------------------------------------
*/

var datasetLineChart = [{'group': 'Bulgarian', 'category': 2013, 'measure': 317},
 {'group': 'Bulgarian', 'category': 2014, 'measure': 313},
 {'group': 'Bulgarian', 'category': 2015, 'measure': 234},
 {'group': 'Bulgarian', 'category': 2016, 'measure': 250},
 {'group': 'Bulgarian', 'category': 2017, 'measure': 175},
 {'group': 'Bulgarian', 'category': 2018, 'measure': 122},
 {'group': 'Bulgarian', 'category': 2019, 'measure': 17},
 {'group': 'English', 'category': 2013, 'measure': 1398},
 {'group': 'English', 'category': 2014, 'measure': 1431},
 {'group': 'English', 'category': 2015, 'measure': 1366},
 {'group': 'English', 'category': 2016, 'measure': 1402},
 {'group': 'English', 'category': 2017, 'measure': 1355},
 {'group': 'English', 'category': 2018, 'measure': 1091},
 {'group': 'English', 'category': 2019, 'measure': 160},
 {'group': 'French', 'category': 2013, 'measure': 279},
 {'group': 'French', 'category': 2014, 'measure': 284},
 {'group': 'French', 'category': 2015, 'measure': 219},
 {'group': 'French', 'category': 2016, 'measure': 251},
 {'group': 'French', 'category': 2017, 'measure': 228},
 {'group': 'French', 'category': 2018, 'measure': 180},
 {'group': 'French', 'category': 2019, 'measure': 16},
 {'group': 'Spanish', 'category': 2013, 'measure': 576},
 {'group': 'Spanish', 'category': 2014, 'measure': 600},
 {'group': 'Spanish', 'category': 2015, 'measure': 548},
 {'group': 'Spanish', 'category': 2016, 'measure': 609},
 {'group': 'Spanish', 'category': 2017, 'measure': 543},
 {'group': 'Spanish', 'category': 2018, 'measure': 464},
 {'group': 'Spanish', 'category': 2019, 'measure': 42},
 {'group': 'Swedish', 'category': 2013, 'measure': 457},
 {'group': 'Swedish', 'category': 2014, 'measure': 425},
 {'group': 'Swedish', 'category': 2015, 'measure': 332},
 {'group': 'Swedish', 'category': 2016, 'measure': 392},
 {'group': 'Swedish', 'category': 2017, 'measure': 281},
 {'group': 'Swedish', 'category': 2018, 'measure': 204},
 {'group': 'Turkish', 'category': 2013, 'measure': 315},
 {'group': 'Turkish', 'category': 2014, 'measure': 358},
 {'group': 'Turkish', 'category': 2015, 'measure': 284},
 {'group': 'Turkish', 'category': 2016, 'measure': 289},
 {'group': 'Turkish', 'category': 2017, 'measure': 275},
 {'group': 'Turkish', 'category': 2018, 'measure': 193},
 {'group': 'Turkish', 'category': 2019, 'measure': 19},
 {'group': 'Chinese', 'category': 2013, 'measure': 575},
 {'group': 'Chinese', 'category': 2014, 'measure': 596},
 {'group': 'Chinese', 'category': 2015, 'measure': 568},
 {'group': 'Chinese', 'category': 2016, 'measure': 573},
 {'group': 'Chinese', 'category': 2017, 'measure': 506},
 {'group': 'Chinese', 'category': 2018, 'measure': 446},
 {'group': 'Chinese', 'category': 2019, 'measure': 50},
 {'group': 'All', 'category': 2013, 'measure': 3917},
 {'group': 'All', 'category': 2014, 'measure': 4007},
 {'group': 'All', 'category': 2015, 'measure': 3551},
 {'group': 'All', 'category': 2016, 'measure': 3766},
 {'group': 'All', 'category': 2017, 'measure': 3363},
 {'group': 'All', 'category': 2018, 'measure': 2700},
 {'group': 'All', 'category': 2019, 'measure': 311}]
;

// set initial category value
var group = "All";

function datasetLineChartChosen(group) {
	var ds = [];
	for (x in datasetLineChart) {
		 if(datasetLineChart[x].group==group){
		 	ds.push(datasetLineChart[x]);
		 } 
		}
	return ds;
}

function dsLineChartBasics() {

	var margin = {top: 20, right: 10, bottom: 50, left: 50},
	    width = 800 - margin.left - margin.right,
	    height = 200 - margin.top - margin.bottom
	    ;
		
		return {
			margin : margin, 
			width : width, 
			height : height
		}			
		;
}


function dsLineChart() {

	var firstDatasetLineChart = datasetLineChartChosen(group);    
	
	var basics = dsLineChartBasics();
	
	var margin = basics.margin,
		width = basics.width,
	   height = basics.height
		;

	var xScale = d3.scale.linear()
	    .domain([0, firstDatasetLineChart.length-1])
	    .range([0, width])
	    ;

	var yScale = d3.scale.linear()
	    .domain([0, d3.max(firstDatasetLineChart, function(d) { return d.measure; })])
	    .range([height, 0])
	    ;
	
	var line = d3.svg.line()
	    //.x(function(d) { return xScale(d.category); })
	    .x(function(d, i) { return xScale(i); })
	    .y(function(d) { return yScale(d.measure); })
	    ;
	
	var svg = d3.select("#lineChart").append("svg")
	    .datum(firstDatasetLineChart)
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	    // create group and move it so that margins are respected (space for axis and title)
	    
	var plot = svg
	    .append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
	    .attr("id", "lineChartPlot")
	    ;

		/* descriptive titles as part of plot -- start */
	var dsLength=firstDatasetLineChart.length;

	plot.append("text")
		.text(firstDatasetLineChart[dsLength-1].measure)
		.attr("id","lineChartTitle2")
		.attr("x",width/2)
		.attr("y",height/2)	
		;
	/* descriptive titles -- end */
	    
	plot.append("path")
	    .attr("class", "line")
	    .attr("d", line)	
	    // add color
		.attr("stroke", "lightgrey")
	    ;
	  
	plot.selectAll(".dot")
	    .data(firstDatasetLineChart)
	  	 .enter().append("circle")
	    .attr("class", "dot")
	    //.attr("stroke", function (d) { return d.measure==datasetMeasureMin ? "red" : (d.measure==datasetMeasureMax ? "green" : "steelblue") } )
	    .attr("fill", function (d) { return d.measure==d3.min(firstDatasetLineChart, function(d) { return d.measure; }) ? "red" : (d.measure==d3.max(firstDatasetLineChart, function(d) { return d.measure; }) ? "green" : "white") } )
	    //.attr("stroke-width", function (d) { return d.measure==datasetMeasureMin || d.measure==datasetMeasureMax ? "3px" : "1.5px"} )
	    .attr("cx", line.x())
	    .attr("cy", line.y())
	    .attr("r", 3.5)
	    .attr("stroke", "lightgrey")
	    .append("title")
	    .text(function(d) { return d.category + ": " + formatAsInteger(d.measure); })
	    ;

	svg.append("text")
		.text("Movie Production in 2019")
		.attr("id","lineChartTitle1")	
		.attr("x",margin.left + ((width + margin.right)/2))
		.attr("y", 10)
		;

}

dsLineChart();


 /* ** UPDATE CHART ** */
 
/* updates bar chart on request */
function updateLineChart(group, colorChosen) {

	var currentDatasetLineChart = datasetLineChartChosen(group);   

	var basics = dsLineChartBasics();
	
	var margin = basics.margin,
		width = basics.width,
	   height = basics.height
		;

	var xScale = d3.scale.linear()
	    .domain([0, currentDatasetLineChart.length-1])
	    .range([0, width])
	    ;

	var yScale = d3.scale.linear()
	    .domain([0, d3.max(currentDatasetLineChart, function(d) { return d.measure; })])
	    .range([height, 0])
	    ;
	
	var line = d3.svg.line()
    .x(function(d, i) { return xScale(i); })
    .y(function(d) { return yScale(d.measure); })
    ;

   var plot = d3.select("#lineChartPlot")
   	.datum(currentDatasetLineChart)
	   ;
	   
	/* descriptive titles as part of plot -- start */
	var dsLength=currentDatasetLineChart.length;
	
	plot.select("text")
		.text(currentDatasetLineChart[dsLength-1].measure)
		;
	/* descriptive titles -- end */
	   
	plot
	.select("path")
		.transition()
		.duration(750)			    
	   .attr("class", "line")
	   .attr("d", line)	
	   // add color
		.attr("stroke", colorChosen)
	   ;
	   
	var path = plot
		.selectAll(".dot")
	   .data(currentDatasetLineChart)
	   .transition()
		.duration(750)
	   .attr("class", "dot")
	   .attr("fill", function (d) { return d.measure==d3.min(currentDatasetLineChart, function(d) { return d.measure; }) ? "red" : (d.measure==d3.max(currentDatasetLineChart, function(d) { return d.measure; }) ? "green" : "white") } )
	   .attr("cx", line.x())
	   .attr("cy", line.y())
	   .attr("r", 3.5)
	   // add color
		.attr("stroke", colorChosen)
	   ;
	   
	   path
	   .selectAll("title")
	   .text(function(d) { return d.category + ": " + formatAsInteger(d.measure); })	 
	   ;  

}

    </script>
          
    
      </div>

    </div>
  </div>
</section>
<!-- /blog single -->


<!-- jQuery -->
<script src="plugins/jQuery/jquery.min.js"></script>
<!-- Bootstrap JS -->
<script src="plugins/bootstrap/bootstrap.min.js"></script>
<!-- slick slider -->
<script src="plugins/slick/slick.min.js"></script>
<!-- masonry -->
<script src="plugins/masonry/masonry.js"></script>
<!-- instafeed -->
<script src="plugins/instafeed/instafeed.min.js"></script>
<!-- smooth scroll -->
<script src="plugins/smooth-scroll/smooth-scroll.js"></script>
<!-- headroom -->
<script src="plugins/headroom/headroom.js"></script>
<!-- reading time -->
<script src="plugins/reading-time/readingTime.min.js"></script>

<!-- Main Script -->
<script src="js/script.js"></script>

</body>
</html>
